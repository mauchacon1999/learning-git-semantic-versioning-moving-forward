#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üîÑ Post-merge hook ejecut√°ndose..."

# Obtener la rama actual usando PowerShell
CURRENT_BRANCH=$(powershell -Command "git branch --show-current")

# Solo crear tags en development y master
if [ "$CURRENT_BRANCH" = "development" ] || [ "$CURRENT_BRANCH" = "master" ]; then
    echo "üì¶ Rama: $CURRENT_BRANCH - Verificando si crear tag autom√°tico..."
    
    # Contar commits desde el √∫ltimo tag usando PowerShell
    COMMITS_SINCE_LAST_TAG=$(powershell -Command "git rev-list --count $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD")
    
    if [ "$COMMITS_SINCE_LAST_TAG" -gt 0 ]; then
        echo "üéØ Encontrados $COMMITS_SINCE_LAST_TAG commits nuevos"
        
        # Determinar tipo de versi√≥n basado en la rama y commits
        if [ "$CURRENT_BRANCH" = "master" ]; then
            VERSION_TYPE="major"
        else
            # En development, verificar si hay features usando PowerShell
            FEATURE_COMMITS=$(powershell -Command "git log --oneline --since='1 day ago' | Select-String 'feat:' | Measure-Object | Select-Object -ExpandProperty Count")
            if [ "$FEATURE_COMMITS" -gt 0 ]; then
                VERSION_TYPE="minor"
            else
                VERSION_TYPE="patch"
            fi
        fi
        
        echo "üè∑Ô∏è  Creando tag autom√°tico: $VERSION_TYPE"
        powershell -ExecutionPolicy Bypass -File "scripts/git-tag-automation-simple.ps1" -VersionType $VERSION_TYPE -AutoConfirm
    else
        echo "‚úÖ No hay commits nuevos para taggear"
    fi
else
    echo "‚è≠Ô∏è  Rama $CURRENT_BRANCH - No se crean tags autom√°ticos"
fi
